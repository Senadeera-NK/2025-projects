------------- GIT HUB -------------------
1. git add .
2. git commit -m "message"
3. git push origin namesense

to update the contribution chart
1. git checkout main
2. git merge namesense
3. git push origin main


---- TO RUN THE FRONT END ----------
npm start
npm install
npx kill-port 3000

-------------MAIN skeleton  ----------------
 ----Tech Stack----
Frontend: React (for a clean UI)
Backend: Flask (lightweight & fast) or FastAPI (modern & async-friendly)
Storage: Google Drive API (for uploading & downloading)
OCR & Classification: Tesseract (images) + pdfplumber (PDFs)
Database (Optional): PostgreSQL/MySQL for logging processed files
üîπ Core Features
1Ô∏è‚É£ User uploads multiple files (PNG, JPG, PDF)
2Ô∏è‚É£ OCR extracts text and classifies the document
3Ô∏è‚É£ Files get renamed & stored
4Ô∏è‚É£ User connects Google Drive to store/retrieve files
5Ô∏è‚É£ Download renamed files from the system

üîπ--- Development Steps---
‚úÖ Step 1: Set Up the Backend (Flask + Google Drive API)
Handle file uploads
Process files (OCR + classification)
Integrate Google Drive for storage
Provide an API for the frontend
‚úÖ Step 2: Build the Frontend (React)
Upload form (drag & drop support)
Display uploaded files & renamed results
Google Drive authentication
Download renamed files
‚úÖ Step 3: Deploy (Cloud-based)
Host the backend on AWS/GCP/Render
Deploy the frontend with Vercel/Netlify
Store API keys securely (Google Drive OAuth)